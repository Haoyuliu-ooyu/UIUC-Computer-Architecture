$date
	Thu Oct 29 16:36:30 2020
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module test $end
$var wire 32 ! out [31:0] $end
$var reg 1 " clk $end
$var reg 1 # done $end
$var reg 1 $ reset $end
$scope module pam $end
$var wire 1 " clk $end
$var wire 1 $ reset $end
$var wire 32 % out [31:0] $end
$var wire 30 & next_index [31:2] $end
$var wire 32 ' next_data [31:0] $end
$var wire 30 ( index [31:2] $end
$var wire 32 ) data [31:0] $end
$scope module Adder $end
$var wire 30 * in2 [29:0] $end
$var wire 30 + out [29:0] $end
$var wire 30 , in1 [29:0] $end
$upscope $end
$scope module Counter $end
$var wire 1 " clk $end
$var wire 30 - d [29:0] $end
$var wire 1 . enable $end
$var wire 1 $ reset $end
$var reg 30 / q [29:0] $end
$upscope $end
$scope module Register $end
$var wire 1 " clk $end
$var wire 1 0 enable $end
$var wire 1 $ reset $end
$var wire 32 1 d [31:0] $end
$var reg 32 2 q [31:0] $end
$upscope $end
$scope module alu $end
$var wire 3 3 control [2:0] $end
$var wire 32 4 inA [31:0] $end
$var wire 32 5 out [31:0] $end
$var wire 1 6 zero $end
$var wire 32 7 inB [31:0] $end
$upscope $end
$scope module rom $end
$var wire 30 8 addr [29:0] $end
$var wire 32 9 data [31:0] $end
$var reg 32 : i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
b100000000 :
bx 9
bx 8
bx 7
x6
bx 5
bx 4
b0 3
bx 2
bx 1
10
bx /
1.
bx -
bx ,
bx +
b1 *
bx )
bx (
bx '
bx &
bx %
1$
0#
0"
bx !
$end
#2
b0 (
b0 ,
b0 /
b0 8
b0 !
b0 %
b0 2
b0 4
1"
#4
b1 )
b1 7
b1 9
b1 &
b1 +
b1 -
0"
#5
06
#6
b1 '
b1 1
b1 5
1"
#8
0"
#10
1"
#12
0"
#13
0$
#14
b1 !
b1 %
b1 2
b1 4
b1 (
b1 ,
b1 /
b1 8
1"
#15
16
#16
b10 '
b10 1
b10 5
b10 )
b10 7
b10 9
b10 &
b10 +
b10 -
0"
#17
06
#18
b10 (
b10 ,
b10 /
b10 8
b11 !
b11 %
b11 2
b11 4
b11 '
b11 1
b11 5
1"
#20
b101 '
b101 1
b101 5
b100 )
b100 7
b100 9
b11 &
b11 +
b11 -
0"
#22
b111 !
b111 %
b111 2
b111 4
b11 (
b11 ,
b11 /
b11 8
b111 '
b111 1
b111 5
1"
#24
b1011 '
b1011 1
b1011 5
b1000 )
b1000 7
b1000 9
b100 &
b100 +
b100 -
0"
#26
b100 (
b100 ,
b100 /
b100 8
b1111 !
b1111 %
b1111 2
b1111 4
b1111 '
b1111 1
b1111 5
1"
#28
b10111 '
b10111 1
b10111 5
b10000 )
b10000 7
b10000 9
b101 &
b101 +
b101 -
0"
#30
b11111 !
b11111 %
b11111 2
b11111 4
b101 (
b101 ,
b101 /
b101 8
b11111 '
b11111 1
b11111 5
1"
#32
b101111 '
b101111 1
b101111 5
b100000 )
b100000 7
b100000 9
b110 &
b110 +
b110 -
0"
#34
b110 (
b110 ,
b110 /
b110 8
b111111 !
b111111 %
b111111 2
b111111 4
b111111 '
b111111 1
b111111 5
1"
#36
b1011111 '
b1011111 1
b1011111 5
b1000000 )
b1000000 7
b1000000 9
b111 &
b111 +
b111 -
0"
#38
b1111111 !
b1111111 %
b1111111 2
b1111111 4
b111 (
b111 ,
b111 /
b111 8
b1111111 '
b1111111 1
b1111111 5
1"
#40
b10111111 '
b10111111 1
b10111111 5
b10000000 )
b10000000 7
b10000000 9
b1000 &
b1000 +
b1000 -
0"
#42
b1000 (
b1000 ,
b1000 /
b1000 8
b11111111 !
b11111111 %
b11111111 2
b11111111 4
b11111111 '
b11111111 1
b11111111 5
1"
#44
b101111111 '
b101111111 1
b101111111 5
b0 )
b0 7
b0 9
b1001 &
b1001 +
b1001 -
0"
#46
b1001 (
b1001 ,
b1001 /
b1001 8
b11111111 '
b11111111 1
b11111111 5
1"
#48
b1010 &
b1010 +
b1010 -
0"
#50
b1010 (
b1010 ,
b1010 /
b1010 8
1"
#52
b1011 &
b1011 +
b1011 -
0"
#54
b1011 (
b1011 ,
b1011 /
b1011 8
1"
#56
b1100 &
b1100 +
b1100 -
0"
#58
b1100 (
b1100 ,
b1100 /
b1100 8
1"
#60
b1101 &
b1101 +
b1101 -
0"
#62
b1101 (
b1101 ,
b1101 /
b1101 8
1"
#63
1#
